@font-face {
	font-family: qp;
	src: url("/iosevka-qp-regular.ttf");
	display: swap;
}

@font-face {
	font-family: qp;
	src: url("/iosevka-qp-light.ttf");
	font-weight: light;
	display: swap;
}

/*
 * todo
 *
 *  - make sure not to use any colours directly that aren't part of the
 * public interface.
 *
 * - separate the colours that are (named by their purpose) from those that
 * aren't (named by a colour or cute name).
 *
 * - enable theming
 */
:root {
	--background-color: #ffe9ed;
	--line-color: #cc3366;
	--recording-background: #cc3366;
	--recording-line: #ffe9ed;
	--background: var(--background-color);
	--line: var(--line-color);
	--intense: #cc1336;
	--selection-background: "#ffee88";
	--active: #ff2a50;
	--weird-green-sea: #4cac9d;
	--black: #1e1316;
	--blue: #407acd;
	--cyan: #22a6cd;
	--green: #00aba5;
	--magenta: #6d1699;
	--red: #ed2b3c;
	--yellow: #e59101;
	--white: #b8768c;
	--bright-black: #543641;
	--bright-blue: #3388ff;
	--orla-foster: #3399ff;
	--bright-cyan: #2ec2ff;
	--bright-green: #01b9a4;
	--bright-magenta: #af40cb;
	--bright-red: #ff275d;
	--bright-yellow: #c9af13;
	--snoot-yellow: #fe8;
	--bright-white: #e090ae;
	--holy-light: #fff;
	--holy-dark: #000;
	--holy-red: #f00;
	--holy-blue: #00f;
	/* :3d_glasses_emoji: */
	--quiet-base: var(--holy-light);
	--pan-left-base: #f00;
	--pan-right-base: var(--holy-blue);
	--compartment-on: var(--line-color);
	--compartment-off: var(--background-color);
	--compartment-line: var(--line-color);
	--pan-left: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 50%
	);
	--pan-right: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 50%
	);
	--columns: repeat(4, 1fr);
	--font-family: qp, iosevka, monaco, monospace;
	--pattern-name-style: lower-latin;
	--box-size: 2em;
	--box-gap: 0.25em;
	--total-width: calc(((var(--box-size) * 4) + (var(--box-gap) * 8)));
	background: var(--background);
	color: var(--line);
	font-family: var(--font-family);
	font-size: 2.2em;
	line-height: 1.15;
}

::selection {
	background: transparent;
}

[screenreader] {
	position: absolute;
	left: -10000px;
	top: auto;
	width: 1px;
	height: 1px;
	overflow: hidden;
}

* {
	overscroll-behavior: none;
	scrollbar-color: var(--line) var(--background);
}

body {
	margin: 0;
}

.bento {
	min-height: 95vh;
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
	font-family: var(--font-family);
	box-sizing: content-box;
	margin-inline: auto;
	max-inline-size: var(--total-width);
}

h1 {
	text-align: center;
}

.ui {
	background: var(--background);
	border: 1px solid;
	margin: 0;
	width: var(--total-width);
	color: var(--line);
	position: relative;
	user-select: none;
	--webkit-user-select: none;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.ui * {
	--webkit-user-select: none;
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
	-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

fieldset {
	border: none;
	margin: 0;
	padding: 0;
}

.master-controls {
	display: flex;
	justify-content: space-evenly;
	text-align: center;
	align-items: center;
	background: var(--background);
	border-bottom: 1px solid;
}

.master-controls input {
	font-size: 1em;
	line-height: 1em;
}

input,
select,
option {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
	border: none;
	background: none;
	font-family: var(--font-family);
	font-size: 1em;
	max-width: 3rem;
	color: currentColor;
	text-align: center;
}

input[type="button"] {
	cursor: pointer;
}

input[type="button"]:hover {
	color: var(--intense);
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
	-webkit-appearance: none;
	margin: 0;
}
input[type="number"] {
	appearance: textfield;
}

.pattern-selector {
	display: flex;
	justify-content: space-evenly;
	background: var(--background);
	counter-reset: pattern;
}

.pattern-selector label::before {
	counter-increment: pattern;
	content: counters(pattern, "", var(--pattern-name-style));
}

.pattern-selector label {
	width: 100%;
	text-align: center;
	cursor: pointer;
}

/* until the :has selector is real */
.pattern-selector label.checked {
	background: var(--line);
	color: var(--background);
}

.pattern-selector label:has(:checked) {
	background: var(--line);
	color: var(--background);
}

/* to be clickable with voice */
.pattern-selector label input {
	height: 5px;
	width: 5px;
	position: absolute;
}

.pattern-controls {
	display: flex;
	justify-content: space-evenly;
	text-align: center;
	background: var(--line);
	color: var(--background);
}

.pattern-controls select {
	font-size: 0.7rem;
}

label.upload {
	font-size: 0.5em;
	line-height: 1rem;
}

/*
 * the rest of the styles for label.recorder are with the [recording] styles
 * further down
*/
label.recorder {
	font-size: 0.8em;
	line-height: 1rem;
	cursor: pointer;
}

label.recorder:focus,
label:has([name="record"]:focus) {
	outline: 2px solid cyan;
}

/* todo consider <bento-screen> */

/*
 * allow selecting a screen by screen.scrollTo(screen.clientWidth * index, 0)
 */
.screen {
	width: var(--total-width);
	overflow: hidden;
	display: flex;
	flex-direction: row;
	scroll-snap-type: x mandatory;
	background: var(--line);
	scrollbar-width: 0;
}

.screen.switching {
	/* overflow-x: scroll; */
}

.screen figure {
	width: var(--total-width);
	margin: 0;
	height: 4em;
	scroll-snap-align: center;
	background: var(--line);
}

.screen figure canvas {
	width: var(--total-width);
	height: 100%;
}

[drop-target] {
	outline: 4px solid var(--weird-green-sea);
}

figure.waveform canvas {
	/* touch-action: manipulation; */
	/* this should disable scrolling, but keep regions working */
	touch-action: none;
}

.screen-selector fieldset {
	display: grid;
	text-align: center;
	grid-template-columns: repeat(4, 1fr);
	font-size: 0.5em;
}

.screen-selector label {
	text-align: center;
	border-bottom: 1px solid;
	cursor: pointer;
	font-weight: bold;
}

.screen-selector label.checked {
	background: var(--line);
	color: var(--background);
}

.screen-selector label:not(:last-child) {
	border-right: 1px solid;
}

.screen-selector label input {
	position: absolute;
	width: 5px;
	height: 5px;
}

/* todo consider moving these styles to their component */

bento-box {
	text-align: center;
	display: grid;
	grid-template-rows: repeat(4, 1fr);
	grid-template-columns: repeat(4, 1fr);
	background: var(--background);
	justify-items: center;
	gap: var(--box-gap);
	margin: var(--box-gap);
}

bento-compartment {
	height: var(--box-size);
	width: var(--box-size);
	border: 1px solid;
	position: relative;
	--compartment-color: var(--compartment-off);
	background: var(--compartment-color);
	color: var(--compartment-line);
	user-select: none;
	--webkit-user-select: none;
}

bento-compartment .wav {
	width: 100%;
	height: 100%;
	image-rendering: optimizeQuality;
	user-select: none;
	pointer-events: none;
	display: none;
	user-select: none;
	--webkit-user-select: none;
	-webkit-user-drag: none;
}

bento-compartment[on][with-wav] .wav {
	display: block;
}

bento-compartment[selected] {
	/* prettier-ignore */
	box-shadow:
		-2px -2px 0 0 var(--background),
		02px 02px 0 0 var(--background),
		-2px 02px 0 0 var(--background),
		02px -2px 0 0 var(--background),
		-3px -3px 0 0 var(--line),
		03px 03px 0 0 var(--line),
		-3px 03px 0 0 var(--line),
		03px -3px 0 0 var(--line),
		-4px -4px 0 0 var(--line),
		04px 04px 0 0 var(--line),
		-4px 04px 0 0 var(--line),
		04px -4px 0 0 var(--line);
	border-color: currentColor;
}

bento-compartment[on] {
	color: var(--compartment-off);
	--compartment-color: var(--compartment-on);
}

bento-compartment:not([on]) {
	background-image: none !important;
}

bento-compartment:focus:not([aria-selected="true"]) {
	outline: 2px dashed currentColor;
	outline-offset: 0;
}

bento-compartment:focus[aria-selected="true"] {
	outline: 0;
}

bento-compartment[playing]:after {
	content: "";
	height: 15%;
	width: 15%;
	position: absolute;
	left: 50%;
	bottom: 1%;
	transform: translate(-50%, -0%);
	border-radius: 100%;
	background: currentColor;
}

bento-compartment[disabled] {
	border: none;
}

/*
 * i will find god
 *
 * it possible to set --compartment-color in both pan and quiet? and do this
 * all in CSS? let's find out!!!!!!
 * todo adjust percentages when you've had a chance to play with it
 */
bento-compartment[pan="-6"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 100%
	);
}

bento-compartment[pan="-5"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 90%
	);
}

bento-compartment[pan="-4"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 80%
	);
}

bento-compartment[pan="-3"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 70%
	);
}

bento-compartment[pan="-2"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 60%
	);
}

bento-compartment[pan="-1"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-left-base) 50%
	);
}

bento-compartment[pan="6"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 100%
	);
}

bento-compartment[pan="5"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 90%
	);
}

bento-compartment[pan="4"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 80%
	);
}

bento-compartment[pan="3"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 70%
	);
}

bento-compartment[pan="2"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 60%
	);
}

bento-compartment[pan="1"] {
	--compartment-color: color-mix(
		in srgb,
		var(--compartment-on),
		var(--pan-right-base) 50%
	);
}

bento-compartment[quiet="1"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 96%
	);
}

bento-compartment[quiet="2"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 88%
	);
}

bento-compartment[quiet="3"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 81%
	);
}

bento-compartment[quiet="4"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 69%
	);
}

bento-compartment[quiet="5"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 63%
	);
}

bento-compartment[quiet="6"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 55%
	);
}

bento-compartment[quiet="7"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 47%
	);
}

bento-compartment[quiet="8"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 39%
	);
}

bento-compartment[quiet="9"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 29%
	);
}

bento-compartment[quiet="10"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 22%
	);
}

bento-compartment[quiet="11"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 13%
	);
}

bento-compartment[quiet="12"] {
	background-color: color-mix(
		in srgb,
		var(--compartment-color),
		var(--quiet-base) 5%
	);
}

body:not([chee]) [chee] {
	display: none;
}

@keyframes blink {
	50% {
		opacity: 0.5;
	}
}

[recording] .recorder {
	animation: blink 1s steps(5, start) infinite;
	cursor: unset;
}

@keyframes spinnygoweee {
	from {
		transform: rotate(360deg);
	}
	to {
		transform: rotate(0deg);
	}
}

.tape {
	display: none;
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	z-index: 1;
	flex-direction: column;
	max-width: 100%;
	align-items: center;
	justify-content: center;
	background: var(--recording-background);
}

.tape svg {
	background: var(--recording-background);
}

[recording] {
	background-color: var(--recording-background);
	min-height: 100vh;
}

[recording] .tape {
	display: flex;
}

.tape .message {
	font-size: 0.8rem;
	color: var(--recording-line);
	padding: 1em;
	padding-top: 0;
	margin: 0;
	margin-top: -1em;
}

.tape .counter {
	font-size: 0.8rem;
	color: var(--recording-line);
	margin: 0;
}

@keyframes fadeaway {
	to {
		opacity: 0;
	}
}

.tape .counter span:last-child {
	animation: fadeaway infinite 1.75s alternate ease-in-out;
}

.tape .counter:empty:after {
	content: " ";
	display: block;

	height: 1.15em;
}

.tape .tape-guide,
.tape .reel {
	animation: infinite spinnygoweee linear;
	transform-origin: center;
	transform-box: fill-box;
	transform-origin: center;
}

.tape .take-up {
	animation-duration: 1.5s;
}

.tape .supply {
	animation-duration: 2.5s;
}

@keyframes wobble {
	from {
		transform: skew(-0.1deg, 0.05deg);
	}
	50% {
		transform: skew(0.1deg, -0.05deg);
	}
}
.tape .spool {
	animation: infinite wobble linear 1.2s;
}

/* all of this is here as a backup plan if the svg fails to load */
[recording] .pattern,
[recording] input,
[recording] label:not(.recorder),
[recording] select,
[recording] .screen .wav,
[recording] .screen .env,
[recording] .screen .mix,
[recording] .screen .fx,
[recording] .screen .wav {
	visibility: hidden;
}
[recording] .pattern-controls select {
	display: none;
}
[recording] .ui {
	background: var(--line-color);
}
[recording] .master-controls {
	border: none;
	background: var(--line-color);
}
[recording] .pattern-controls,
[recording] .pattern-selector {
	background: var(--line-color);
}

[recording] {
	/* --line: color-mix(in srgb, var(--background-color), 50% var(--line-color)); */
	--background: var(--background-color);
}

[recording] bento-box {
	visibility: hidden;
}

[recording] bento-compartment {
	background: none;
	background-image: none;
}
/* </backup-plan> */

dialog {
	box-sizing: border-box;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	z-index: 1;
	height: 100%;
	width: 100%;
	color: var(--background);
	padding: 1em;
	background: var(--orla-foster);
	color: var(--holy-light);
}

dialog * {
	box-sizing: border-box;
}

dialog .close {
	position: absolute;
	top: 0.25em;
	right: 0.25em;
	background: transparent;
	color: currentColor;
	border: none;
	appearance: none;
	font-size: 1rem;
	cursor: pointer;
	overflow: hidden;
	text-align: center;
	width: 2em;
}

dialog .button {
	border: 4px solid;
	--other-edge: color-mix(in srgb, var(--orla-foster) 60%, var(--holy-dark));
	border-bottom-color: var(--other-edge);
	border-right-color: var(--other-edge);
	background: color-mix(in srgb, var(--orla-foster) 90%, var(--holy-light));
	color: color-mix(in srgb, var(--orla-foster) 15%, var(--holy-light));
}

dialog .content {
	display: flex;
	margin-top: 2em;
	font-size: 0.8rem;
}

dialog .button:hover,
dialog .button:focus {
	color: var(--holy-light);
}

dialog .button:active {
	border-color: var(--other-edge) currentColor currentColor var(--other-edge);
}

dialog .content .button {
	max-width: unset;
	white-space: break-spaces;
	width: 100%;
}
